#!/usr/bin/env python3
"""
Generate the animals_furs.py file from the game's global_animal_types.blo.txt file.

This script reads animal types and their visual variations from the game data
and generates the lib/model/animals_furs.py file with AnimalFur objects.

Usage:
    python scripts/generate_animals_furs.py
"""

import re
from pathlib import Path
from typing import List, Tuple
import sys

sys.path.insert(0, str(Path(__file__).parent.parent))

from lib.deca.hashes import hash32_func


def extract_animal_furs(blo_path: Path) -> List[Tuple[str, int, str]]:
    """
    Extract animal fur variations from the BLO file.
    
    Returns:
        List of tuples: (animal_name, fur_index, fur_variation_name)
    """
    animal_furs = []
    
    with open(blo_path, 'r') as f:
        lines = f.readlines()
    
    current_animal = None
    in_visual_variation = False
    variation_index = None
    variation_name = None
    variation_start_line = None
    
    for i, line in enumerate(lines):
        # Track the current animal type - match the exact pattern
        if '"_class_hash"' in line and 'u32:DB:H4:"CAnimalType"' in line:
            # Look ahead for the animal name
            for j in range(i+1, min(i+10, len(lines))):
                if '"name"' in lines[j]:
                    match = re.search(r"b'([a-z_]+)'", lines[j])
                    if match:
                        animal_name = match.group(1)
                        if 'clue' not in animal_name and animal_name not in ['unknown', 'homo_sapien']:
                            current_animal = animal_name
                    break
        
        # Track visual variations - match the exact pattern
        if '"_class_hash"' in line and 'u32:DB:H4:"SAnimalTypeVisualVariation"' in line:
            # Save previous variation if we have complete data
            if in_visual_variation and current_animal and variation_index is not None and variation_name:
                animal_furs.append((current_animal, variation_index, variation_name))
            
            in_visual_variation = True
            variation_index = None
            variation_name = None
            variation_start_line = i
        elif in_visual_variation:
            # Extract index
            if '"index"' in line:
                match = re.search(r'= @0x[0-9a-f]+\(\s*\d+\)\s+(\d+)', line)
                if match:
                    variation_index = int(match.group(1))
            
            # Extract variation name (the fur type identifier)
            if '0xf336b29f' in line:  # This hash appears to be the fur type field
                match = re.search(r"b'([a-z_]+)'", line)
                if match:
                    variation_name = match.group(1)
                    # Remove 'animal_visual_variation_' prefix
                    variation_name = variation_name.replace('animal_visual_variation_', '')
    
    # Don't forget the last variation
    if in_visual_variation and current_animal and variation_index is not None and variation_name:
        animal_furs.append((current_animal, variation_index, variation_name))
    
    return sorted(animal_furs, key=lambda x: (x[0], x[1]))


def generate_furs_code(animal_furs: List[Tuple[str, int, str]]) -> str:
    """Generate the Python code for animals_furs.py"""
    
    # Group furs by animal for better organization
    from collections import defaultdict
    furs_by_animal = defaultdict(list)
    for animal, index, fur_name in animal_furs:
        furs_by_animal[animal].append((index, fur_name))
    
    # Build the code
    code = '''"""
Animal fur variations.

This file is AUTO-GENERATED by scripts/generate_animals_furs.py
DO NOT EDIT MANUALLY - your changes will be overwritten!

To regenerate this file, run:
    python scripts/generate_animals_furs.py
"""

from typing import List

from lib.model.animal_type import AnimalType
from lib.model.animal_type_fur import AnimalFur

ANIMALS_FURS: List[AnimalFur] = [
'''
    
    # Generate entries
    for animal in sorted(furs_by_animal.keys()):
        code += f"    # {animal}\n"
        for index, fur_name in furs_by_animal[animal]:
            animal_enum = animal.upper()
            code += f"    AnimalFur(AnimalType.{animal_enum}, {index}, '{fur_name}'),\n"
    
    code += ']\n'
    
    return code


def main():
    script_dir = Path(__file__).parent
    blo_path = script_dir.parent / 'import' / 'global_animal_types.blo.txt'
    output_path = script_dir.parent / 'lib' / 'model' / 'animals_furs.py'
    
    if not blo_path.exists():
        print(f"ERROR: Could not find {blo_path}")
        print("Make sure the import/global_animal_types.blo.txt file exists.")
        sys.exit(1)
    
    print(f"Reading animal furs from: {blo_path}")
    animal_furs = extract_animal_furs(blo_path)
    print(f"Found {len(animal_furs)} fur variations")
    
    if not animal_furs:
        print("WARNING: No animal furs found. Check the BLO file format.")
        sys.exit(1)
    
    print(f"Generating code...")
    code = generate_furs_code(animal_furs)
    
    print(f"Writing to: {output_path}")
    output_path.write_text(code)
    
    print("âœ“ Successfully generated animals_furs.py")
    print(f"\nGenerated {len(animal_furs)} fur variations")
    
    # Show sample
    from collections import defaultdict
    furs_by_animal = defaultdict(int)
    for animal, _, _ in animal_furs:
        furs_by_animal[animal] += 1
    
    print(f"\nFur variations by animal (showing first 10):")
    for i, (animal, count) in enumerate(sorted(furs_by_animal.items())[:10]):
        print(f"  {animal}: {count} variations")
    if len(furs_by_animal) > 10:
        print(f"  ... and {len(furs_by_animal) - 10} more animals")


if __name__ == '__main__':
    main()
