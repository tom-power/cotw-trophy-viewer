#!/usr/bin/env python3
"""
Generate the AnimalType enum from the game's global_animal_types.blo.txt file.

This script reads the animal type names from the game data and generates
the lib/model/animal_type.py file with an enum where each value is the
hash of the animal type name.

Usage:
    python scripts/generate_animal_type_enum.py
"""

import re
from pathlib import Path
from typing import List, Tuple

# Add parent directory to path to import hash function
import sys
sys.path.insert(0, str(Path(__file__).parent.parent))

from lib.deca.hashes import hash32_func


def extract_animal_types(blo_path: Path) -> List[str]:
    """
    Parse the global_animal_types.blo.txt file to extract animal type names.

    Args:
        blo_path: Path to the global_animal_types.blo.txt file

    Returns:
        List of animal type names in lowercase
    """
    animal_types = []

    with open(blo_path, 'r') as f:
        lines = f.readlines()

    # Find all lines with "name" field after _class_hash CAnimalType
    in_animal_type = False

    for line in lines:
        if '"_class_hash"' in line and 'CAnimalType' in line:
            in_animal_type = True
        elif in_animal_type and '"name"' in line:
            # Extract the animal name
            match = re.search(r"b'([a-z_]+)'", line)
            if match:
                animal_name = match.group(1)
                # Filter out non-animal entries (clue types, etc.)
                if 'clue' not in animal_name and animal_name not in ['unknown', 'homo_sapien']:
                    animal_types.append(animal_name)
            in_animal_type = False

    return sorted(set(animal_types))


def generate_enum_code(animal_types: List[str]) -> str:
    """
    Generate the Python code for the AnimalType enum.

    Args:
        animal_types: List of animal type names in lowercase

    Returns:
        Python code as a string
    """
    # Generate enum entries with hash values
    enum_entries = []
    for animal_name in animal_types:
        enum_name = animal_name.upper()
        hash_value = hash32_func(animal_name)
        enum_entries.append(f"    {enum_name} = {hash_value}  # 0x{hash_value:08x}")

    # Build the complete module
    code = '''"""
Animal type enumeration.

This file is AUTO-GENERATED by scripts/generate_animal_type_enum.py
DO NOT EDIT MANUALLY - your changes will be overwritten!

To regenerate this file, run:
    python scripts/generate_animal_type_enum.py
"""

from enum import Enum


class AnimalType(Enum):
    """
    Enumeration of all animal types in the game.

    Each enum value is the hash of the animal type name (lowercase).
    This allows direct comparison with hash values from ADF save files.
    """
'''

    code += '\n'.join(enum_entries)
    code += '\n'

    return code


def main():
    """Generate the animal_type.py file from the game data."""
    # Paths
    script_dir = Path(__file__).parent
    blo_path = script_dir.parent / 'import' / 'global_animal_types.blo.txt'
    output_path = script_dir.parent / 'lib' / 'model' / 'animal_type.py'

    # Verify input file exists
    if not blo_path.exists():
        print(f"ERROR: Could not find {blo_path}")
        print("Make sure the notes/global_animal_types.blo.txt file exists.")
        sys.exit(1)

    print(f"Reading animal types from: {blo_path}")
    animal_types = extract_animal_types(blo_path)
    print(f"Found {len(animal_types)} animal types")

    print(f"Generating enum code...")
    code = generate_enum_code(animal_types)

    print(f"Writing to: {output_path}")
    output_path.write_text(code)

    print("âœ“ Successfully generated animal_type.py")
    print(f"\nGenerated {len(animal_types)} animal types:")
    for i, name in enumerate(animal_types[:10]):
        hash_val = hash32_func(name)
        print(f"  {name.upper()} = {hash_val} (0x{hash_val:08x})")
    if len(animal_types) > 10:
        print(f"  ... and {len(animal_types) - 10} more")


if __name__ == '__main__':
    main()
